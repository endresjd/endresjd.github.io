<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Macplugins</title><description>Website for Macplugins</description><link>https://endresjd.github.io</link><language>en</language><lastBuildDate>Wed, 12 May 2021 14:13:46 -0400</lastBuildDate><pubDate>Wed, 12 May 2021 14:13:46 -0400</pubDate><ttl>250</ttl><atom:link href="https://endresjd.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://endresjd.github.io/privacy/fortune</guid><title>Fortune Privacy policy</title><description>Privacy Policy for Fortune 3.0</description><link>https://endresjd.github.io/privacy/fortune</link><pubDate>Wed, 12 May 2021 14:13:42 -0400</pubDate><content:encoded><![CDATA[<p align="center">
    <img src="https://endresjd.github.io/images/fortune.png" width="120" max-width="90%" alt="Fortune" />

    <h1 align="center">Fortune</h1>
</p><h1>Privacy policy</h1><p>Macplugins built the Fortune app as a Commercial app. This SERVICE is provided by Macplugins and is intended for use as is. This page is used to inform users regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service.</p><p>&nbsp;</p><h1>Information Collection and Use</h1><p>Fortune DOES NOT collect, transmit, or store any data. Period.</p><p>&nbsp;</p><h1>Changes to This Privacy Policy</h1><p>I may update our Privacy Policy from time to time. Thus, you are advised to review this page periodically for any changes. I will notify you of any changes by posting the new Privacy Policy on this page. These changes are effective immediately after they are posted on this page.</p><p>&nbsp;</p><h1>Contact Macplugins</h1><p>If you have any questions or suggestions about my Privacy Policy, do not hesitate to contact me.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://endresjd.github.io/privacy/wordtiles</guid><title>WordTiles Privacy policy</title><description>Privacy Policy for WordTiles</description><link>https://endresjd.github.io/privacy/wordtiles</link><pubDate>Wed, 12 May 2021 14:11:43 -0400</pubDate><content:encoded><![CDATA[<p align="center">
    <img src="https://endresjd.github.io/images/wordtiles.png" width="120" max-width="90%" alt="WordTiles" />

    <h1 align="center"> WordTiles </h1>
</p><h1>Privacy policy</h1><p>Macplugins built the WordTiles app as a Commercial app. This SERVICE is provided by Macplugins and is intended for use as is. This page is used to inform users regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service.</p><p>&nbsp;</p><h1>Information Collection and Use</h1><p>WordTiles DOES NOT collect, transmit, or store any data. Period.</p><p>&nbsp;</p><h1>Changes to This Privacy Policy</h1><p>I may update our Privacy Policy from time to time. Thus, you are advised to review this page periodically for any changes. I will notify you of any changes by posting the new Privacy Policy on this page. These changes are effective immediately after they are posted on this page.</p><p>&nbsp;</p><h1>Contact Macplugins</h1><p>If you have any questions or suggestions about my Privacy Policy, do not hesitate to contact me.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://endresjd.github.io/posts/publishing</guid><title>Seeing about publishing pipelines</title><description>Publishing Step Understanding.</description><link>https://endresjd.github.io/posts/publishing</link><pubDate>Tue, 11 May 2021 15:23:53 -0400</pubDate><content:encoded><![CDATA[<h1>Seeing about publishing pipelines</h1><p>Publishing is a series of steps that transform the content of the website from files and swift into what goes into the Output folder. After running the full sequence of steps successfully, a fully generated website should be placed in the Output folder.</p><h2>Types of publishing tasks</h2><ol><li>adding, removing, mutating content (various types) such as items, pages, markdownFiles, etc.</li><li>copying things into the website. Resources, files,</li><li>generating content: generateHTML, generateRSSFeed, generateSiteMap</li><li>podcast information: generatePodcastFeed</li><li>deploy (using a given method)</li></ol><h2>What is the deploy step?</h2><p>Publish can also facilitate the deployment of websites to external servers through its DeploymentMethod API, and ships with built-in implementations for Git and GitHub-based deployments. To define a deployment method for a website, add the deploy step to your publishing pipeline:</p><h3>From the documentation</h3><pre><code><span class="keyword">try</span> <span class="type">DeliciousRecipes</span>().<span class="call">publish</span>(using: [
    ...
    .<span class="call">deploy</span>(using: .<span class="call">gitHub</span>(<span class="string">"johnsundell/delicious-recipes"</span>))
])
</code></pre><p>Implies that it is deploying the website to GitHub. The top level seems to have raw git commands for pushing folder contents to a repository. What it is pushing is some kind of deployment directory that it creates.</p><ul><li>Publish can also facilitate the deployment of websites to external servers through its DeploymentMethod API, and ships with built-in implementations for Git and GitHub-based deployments. To define a deployment method for a website, add the deploy step to your publishing pipeline:</li><li>Even when added to a pipeline, deployment steps are disabled by default, and are only executed when the --deploy command line flag was passed (which can be added through Xcodeâ€™s Product &gt; Scheme &gt; Edit Scheme... menu), or by running the command line tool using publish deploy.</li><li>Creates a hidden folder: .publish/GitDeploy/ at the project level.</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://endresjd.github.io/posts/high%20level%20points</guid><title>High-level points</title><description>High-level points</description><link>https://endresjd.github.io/posts/high%20level%20points</link><pubDate>Tue, 11 May 2021 13:54:57 -0400</pubDate><content:encoded><![CDATA[<h1>High-level points</h1><ol><li>Creates Swift executable packages that output static web sites based on resources on disk and in code.</li><li>Works in a similar way as SwiftUI where the structure of the web pages is defined by code using functions similar to HTML tags but with a slightly different style</li><li>The basic layout is very close to Sundell's web site. The theming differs.</li><li>Theming inside the app is what really gives each page its layout, style, and content. Replacing the foundation theme with a custom one gives complete control.</li><li>Styling is done by css. The general look can be controlled using the Foundation theme by adjusting styles.css, but then only by duplicating the code and manually getting a replacement css file put into the resources folder. (My current understanding)</li><li>Files with web site content are markdown files, but the display of those is in HTML, so the rendering will be different. It depends on the theme, and that theme's underlying css styling. A good example is with these numbered lists. The alignment is good in markdown but way off in HTML. (This may be more aligned with how the default styling/css is setup to support his site than it does with HTML)</li><li>Default publish steps (for generating the site) are minimal, so you usually will need to enumerate out all the steps. Some, like sorting, can be missed easily and this is why the order of listed posts was unsorted.</li><li>Markdown can have raw HTML in it that can help in things like images.</li></ol><h1>Review of theme Nodes</h1><p>These are the types of pages the theme is called on to create.</p><ol><li>Index: page generated that represents the landing point for the web site. Default lists all the latest cotent.</li><li>Section: a page that displaya summaries for each file in a container, which is a folder in the Content.</li><li>Item: a page that shows the content of one of the markdown files in a container.</li><li>Page: a single page that is not part of a container. Either done in code or a markdown file in the content that is not a container (folder)</li><li>Tag List: HTML to use for the website's list of tags, if supported.</li><li>Tag Details: HTML to use for a tag details page, used to represent a single tag.</li></ol><p>Comment from addMarkdownFiles(): Parse a folder of Markdown files and use them to add content to the website. The root folders will be parsed as sections, and the files within them as items, while root files will be parsed as pages.</p><h1>Some assumptions</h1><ol><li>Maybe I don't have to know how it reads in and parses the files. That's at a low level, and my known exposure to that data is in the theming part with the data already parsed out into the objects I need. Control over display would be through css.</li><li>Indentation isn't something I understand well enough. It's to control if the web page uses tabs or spaces when it indents. Not sure how that might apply to web pages, so I'm leaving it alone.</li></ol><h1>Frameworks</h1><p>The whole package is broken down into subframeworks that are also from Sundell including at least one I've been using in other projects.</p><ol><li>Codextended -- Extensions giving Swift's Codable API type inference super powers</li><li>Files -- A nicer way to handle files &amp; folders in Swift</li><li>Ink -- A fast and flexible Markdown parser written in Swift</li><li>Plot -- A DSL for writing type-safe HTML, XML and RSS in Swift</li><li>Publish -- A static site generator for Swift developers</li><li>Sweep -- Fast and powerful Swift string scanning made simple</li></ol><h1>Observations</h1><ol><li>Ink framework converts Markdown into HTML. See MarkdownParser.parse()</li><li>Seems hard to customize the styling for heading tags.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://endresjd.github.io/posts/theming</guid><title>Understand HTML Themes</title><description>HTML Themes</description><link>https://endresjd.github.io/posts/theming</link><pubDate>Fri, 7 May 2021 09:46:53 -0400</pubDate><content:encoded><![CDATA[<h1>Understand HTML Themes</h1><p>Going from the snippet on the Sundell site to the more complex one in the example I've been basing my learning off of and capturing some notes.</p><h2>From documentation</h2><p>Publish uses Plot as its HTML theming engine, which enables entire HTML pages to be defined using Swift. When using Publish, itâ€™s recommended that you build your own website-specific theme â€” that can make full use of your own custom metadata, and be completely tailored to fit your websiteâ€™s design.</p><p>Themes are defined using the Theme type, which uses an HTMLFactory implementation to create all of a websiteâ€™s HTML pages.</p><h2>The key item</h2><p>More thorough documentation on how to build Publish themes, and some of the recommended best practices for doing so, will be added shortly.</p><h2>How to use a theme</h2><p>The generateHTML step generates the HTML defined in the Swift files based on the given theme. In this example it is using an extension referenced by the stativ var personal that creates an instance of an HTMLFactory customized locally.</p><p>.generateHTML(withTheme: .personal),</p><p>Generating a new theme seems to require duplicating the foundation theme entirely, since it is private, and moving on from there. Inside that theme are references to style sheets referenced via paths. Seeing how to reference our own. The base css file is tightly bound to the foundation theme, so seems like a good base/match. The problem is that the foundation theme seems to override all attempts at me overriding it. The style is copied, but into a sub folder. If put at the top it will fail because of the foundation one.</p><p>Made a styles folder (similar to the other project) with a modified styles.css, made my theme not copy over anything (the copy phase gets the default one always maybe?), and added a new copy phase to get the updated stylesheet. This allowed me to use the right styles. It still required a hard copy of the original theme code.</p><p><strong>Key</strong>: Resource paths are generated from the package folder and not the Resources folder. When specifying, you have to start with Resources.</p><p><strong>Look at</strong>: Indentation options used in the generate step.</p><h1>Factory protocol</h1><p>Each theme needs to be able to create each of the main 6 parts of a Publish web site.</p><ol><li>makeIndexHTML -- Create the HTML to use for the website's main index page.</li><li>makeSectionHTML -- Create the HTML to use for the index page of a section</li><li>makeItemHTML -- Create the HTML to use for an item</li><li>makePageHTML -- Create the HTML to use for a page</li><li>makeTagListHTML -- Create the HTML to use for the website's list of tags, if supported</li><li>makeTagDetailsHTML -- Create the HTML to use for a tag details page, used to represent a single tag</li></ol><h1>How does markdown translate to HTML</h1><p>Looking at makePageHTML() for this because this is where contentBody() is called. This just renders already premade body.html. Of course the current debugger wont print the value of that to the console.</p><p>The theme object uses a private extension to Node that has helpers for different elements it looks like.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://endresjd.github.io/posts/metadata</guid><title>Looking at metadata in markdown files</title><description>Some metadata in markdown files.</description><link>https://endresjd.github.io/posts/metadata</link><pubDate>Thu, 6 May 2021 14:05:43 -0400</pubDate><content:encoded><![CDATA[<h1>Looking at metadata in markdown files</h1><h2>Comments</h2><p>Publish.Location has documentation (comments) on some of the format here. I notice that some of these rely on HTML knowledge I really don't have.</p><h2>Title</h2><h3>Metadata</h3><p>title metadata will be used at the outer level to show the title of the article before you click on it.</p><h3>Top-Level H1 heading</h3><p>The top-level H1 heading is used when showing this file. If missing, there will be no title.</p><h3>Conclusion</h3><p>Conclusion is to not use the metadata unless you write a publishing step to reinsert it into this page when rendered.</p><h2>Description</h2><h3>Metadata</h3><p>Entered at the top of the file. A description of the location. When parsing a location from Markdown, a description may be defined using the <code>description</code> metadata key. This is displayed in the list of items page as an overview of what the post is about.</p><h2>Date</h2><h3>Observation</h3><p>The date is used for sorting but doesn't seem to be displayed normally. The sample project displays it on the item being displayed with code to modify the post's output.</p><h3>Metadata</h3><p>If specified, this will be used as the date of the item. A way to manually set the date and time. Funny to note that I used the wrong date here (typo in the year).</p><p>date: 2022-05-06 10:03</p><h3>Normal operation</h3><p>The date for the post is normally the modification date of the file.</p><h3>Conclusion</h3><p>Unless something is screwey with modification dates changing, this would be the better approach rather than trying to keep things current by hand.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://endresjd.github.io/posts/observations</guid><title>Initial information gathering</title><description>Inital investigation of Publish.</description><link>https://endresjd.github.io/posts/observations</link><pubDate>Thu, 6 May 2021 14:05:41 -0400</pubDate><content:encoded><![CDATA[<h1>Initial information gathering</h1><p>The documentation is very brief and really does not cover much, so this covers top-level topics from the documentation along with observation from trial-and-error runs and from web sites I've found that are based on Publish.</p><h2>Links that helped</h2><ul><li><a href="https://github.com/JohnSundell/Publish">Publish</a></li><li><a href="https://www.mxgzf.com/posts/2020-03-03-Relaunching-my-website-using-Swift/">Relaunching my website using Swift</a></li><li><a href="https://github.com/crelies/christianelies.de">Christian Elies</a></li></ul><h2>Markdown</h2><p>Markdown is wonky. Doesn't render the way I'm expecting. This is where theming and customization probably is needed based on the layout of other pages.</p><h1>HomeBrew tools</h1><p>Working with the websites is done through a tool published with Homebrew called publish. Install that and the commands it provides become clear.</p><h2>publish new</h2><p>Set up a new website in the current folder as a Swift Package Manager project.</p><h2>publish generate</h2><p>Generate the website in the current folder.</p><h2>publish deploy</h2><p>Generate and deploy the website in the current folder, according to its deployment method.</p><h2>publish run</h2><p>Generate and run a localhost server on default port 8000 for the website in the current folder. Use the "-p" or "--port" option for customizing the default port.<br><br>Now it says very clearly, but I didn't notice, but you can regenerate the web site by running the project in Xcode instead of stopping and starting the server all the time.</p><h1>Terms</h1><h2>Website</h2><p>Protocol used to define a Publish-based website. You conform to this protocol using a custom type, which is then used to infer various information about your website when generating its various HTML pages and resources. A website is then published using a pipeline made up of PublishingStep values, which is constructed using the publish method. To generate the necessary bootstrapping for conforming to this protocol, use the publish new command line tool.</p><h2>WebsiteSectionID</h2><p>Used with an associated type to define sections for each site. The enum elements define the sections that are display across the top of the screen for the current theme. The order of the enums is the order they are displayed across the screen.</p><h2>Content</h2><p><strong>Sections</strong>	created based on the members of each websiteâ€™s SectionID enum. Each section both has its own HTML page, and can also act as a container for a list of Items. <strong>Section.md</strong> renders as a standalone page. <strong>Section/</strong> (a folder) renders the md files inside of it in a list for that section. This container can further customize the section name by defining index.md whose content is a single line with header 1 style. This defines the name that shows at the top of the container.</p><p><strong>Items</strong> which represent the nested HTML pages within that section. As I understand this, in the simplist case, an item is a markdown file inside a section folder.</p><p><strong>Pages</strong> provide a way to build custom free-form pages that can be placed into any kind of folder hierarchy. I believe, but am not certain, that this is done with the help of code.</p>]]></content:encoded></item></channel></rss>